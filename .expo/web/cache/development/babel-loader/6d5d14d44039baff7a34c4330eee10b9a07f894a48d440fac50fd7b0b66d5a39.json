{"ast":null,"code":"export var isValidCPF = function isValidCPF(cpf) {\n  if (typeof cpf !== 'string') return false;\n  cpf = cpf.replace(/[\\s.-]*/gim, '');\n  if (!cpf || cpf.length !== 11 || !/^\\d{11}$/.test(cpf) || cpf === '00000000000' || cpf === '11111111111' || cpf === '22222222222' || cpf === '33333333333' || cpf === '44444444444' || cpf === '55555555555' || cpf === '66666666666' || cpf === '77777777777' || cpf === '88888888888' || cpf === '99999999999') return false;\n  var add = 0;\n  for (var i = 0; i < 9; i++) add += parseInt(cpf.charAt(i)) * (10 - i);\n  var rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(9))) return false;\n  add = 0;\n  for (var _i = 0; _i < 10; _i++) add += parseInt(cpf.charAt(_i)) * (11 - _i);\n  rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(10))) return false;\n  return true;\n};","map":{"version":3,"names":["isValidCPF","cpf","replace","length","test","add","i","parseInt","charAt","rev"],"sources":["C:/glia/localizacao/GliaApp/src/utils/cpfValidation.ts"],"sourcesContent":["\r\n    export const isValidCPF = (cpf: string): boolean => {\r\n        if (typeof cpf !== 'string') return false;\r\n        cpf = cpf.replace(/[\\s.-]*/gim, '');\r\n        if (\r\n          !cpf ||\r\n          cpf.length !== 11 ||\r\n          !/^\\d{11}$/.test(cpf) ||\r\n          cpf === '00000000000' ||\r\n          cpf === '11111111111' ||\r\n          cpf === '22222222222' ||\r\n          cpf === '33333333333' ||\r\n          cpf === '44444444444' ||\r\n          cpf === '55555555555' ||\r\n          cpf === '66666666666' ||\r\n          cpf === '77777777777' ||\r\n          cpf === '88888888888' ||\r\n          cpf === '99999999999'\r\n        )\r\n          return false;\r\n      \r\n       \r\n      \r\n        let add = 0;\r\n        for (let i = 0; i < 9; i++) add += parseInt(cpf.charAt(i)) * (10 - i);\r\n        let rev = 11 - (add % 11);\r\n        if (rev === 10 || rev === 11) rev = 0;\r\n        if (rev !== parseInt(cpf.charAt(9))) return false;\r\n      \r\n       \r\n      \r\n        add = 0;\r\n        for (let i = 0; i < 10; i++) add += parseInt(cpf.charAt(i)) * (11 - i);\r\n        rev = 11 - (add % 11);\r\n        if (rev === 10 || rev === 11) rev = 0;\r\n        if (rev !== parseInt(cpf.charAt(10))) return false;\r\n      \r\n       \r\n      \r\n        return true;\r\n      };\r\n"],"mappings":"AACI,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAUA,CAAIC,GAAW,EAAc;EAChD,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,KAAK;EACzCA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;EACnC,IACE,CAACD,GAAG,IACJA,GAAG,CAACE,MAAM,KAAK,EAAE,IACjB,CAAC,UAAU,CAACC,IAAI,CAACH,GAAG,CAAC,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,EAErB,OAAO,KAAK;EAId,IAAII,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAED,GAAG,IAAIE,QAAQ,CAACN,GAAG,CAACO,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACrE,IAAIG,GAAG,GAAG,EAAE,GAAIJ,GAAG,GAAG,EAAG;EACzB,IAAII,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,EAAE,EAAEA,GAAG,GAAG,CAAC;EACrC,IAAIA,GAAG,KAAKF,QAAQ,CAACN,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;EAIjDH,GAAG,GAAG,CAAC;EACP,KAAK,IAAIC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,EAAE,EAAEA,EAAC,EAAE,EAAED,GAAG,IAAIE,QAAQ,CAACN,GAAG,CAACO,MAAM,CAACF,EAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,EAAC,CAAC;EACtEG,GAAG,GAAG,EAAE,GAAIJ,GAAG,GAAG,EAAG;EACrB,IAAII,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,EAAE,EAAEA,GAAG,GAAG,CAAC;EACrC,IAAIA,GAAG,KAAKF,QAAQ,CAACN,GAAG,CAACO,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,KAAK;EAIlD,OAAO,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}